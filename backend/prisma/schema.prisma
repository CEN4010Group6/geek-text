// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id String @id @default(uuid())
  email String @unique
  passwordHash String?
  firstName String?
  middleName String?
  lastName String?
  profilePicture String?
  transactions Transaction[]
  shippingAddress Address[] @relation("ShippingAddress")
  creditCard CreditCard[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("users")
}

model Book {
  id String @id @default(uuid())
  title String @unique
  author Author[]
  publisher Publisher
  isbn Int @unique
  description String
  genre Genre[]
  price Float
  rating Rating[]
  coverUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("books")
}

model Author {
  id String @id @default(uuid())
  firstName String
  middleName String?
  lastName String
  description String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("authors")
  @@unique([firstName, lastName])
}

model Publisher {
  id String @id @default(uuid())
  name String @unique
  // City? State?
  @@map("publishers")
}

model Genre {
  id Int @id @default(autoincrement())
  name String @unique
  @@map("genres")
}

model Rating {
  id String @id @default(uuid())
  value Int @default(0)
  description String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  userId String
  book Book @relation(fields: [bookId], references: [id])
  bookId String
  @@map("ratings")
}

model Address {
  id String @id @default(uuid())
  street String
  apartmentOrUnit String?
  city String
  state String
  country String
  zipcode String
  userShippingAddress User @relation("ShippingAddress", fields: [userShippingAddressId], references: [id])
  userShippingAddressId String
  @@map("addresses")
}

model Transaction {
  id String @id @default(uuid())
  user User @relation(fields: [userId], references: [id])
  userId String
  books Book[] // @relation(fields: [booksId], references: [id])
  booksId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("transactions")
}

model CreditCard {
  id String @id @default(uuid())
  user User @relation(fields: [userId], references: [id])
  userId String
  encryptedCreditCardNumber String
  encryptedCCV String
  lastFourDigits String
  expirationDate DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("credit_cards")
}

model SavedShoppingCart {
  id String @id @default(uuid())
  user User @relation(fields: [userId], references: [id])
  userId String
  books Book[]
  @@map("saved_shopping_carts")
}
